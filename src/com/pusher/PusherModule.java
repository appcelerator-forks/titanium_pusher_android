/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.pusher;

import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.util.TiConvert;

import org.json.JSONObject;

import com.emorym.android_pusher.Pusher;
import com.emorym.android_pusher.PusherChannel;
import com.emorym.android_pusher.PusherLogger;

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;



@Kroll.module(name="Pusher", id="com.pusher")
public class PusherModule extends KrollModule
{
	// private static final boolean DBG = TiConfig.LOGD;
	public Pusher mPusher;
	private String mPusherKey;
	private Boolean mReconnectAutomatically;
	private Boolean mEncrypted;
	//private Integer mReconnectDelay;
	private KrollFunction mLogger = null;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public PusherModule() {
		super();
	}
	
	@Override
	public void onDestroy(Activity activity) {
		activity.runOnUiThread(new Runnable() {
			@Override
			public void run() {
				PusherModule.this.disconnect();
			}
		});
	}

	// Methods
	@Kroll.method
	public void setup(@SuppressWarnings("rawtypes") HashMap map) {
    @SuppressWarnings("unchecked")
	 	KrollDict args = new KrollDict(map);

		mPusherKey = args.getString("key");
		mEncrypted = args.optBoolean("encrypted", false);
		mReconnectAutomatically = args.optBoolean("reconnectAutomatically", true);
		//mReconnectDelay = args.optInt("reconnectDelay", 5);
		
		if(mPusherKey == null || mPusherKey.length() == 0) {
			throw new RuntimeException("Pusher key is required");
		}
		
		Map<String,Map<String,String>> auth = new HashMap<String,Map<String,String>>();
		if (args.containsKey("params")){
			KrollDict kparams = args.getKrollDict("params");
			Map<String,String> params = new HashMap<String,String>();
			Iterator<String> iter = kparams.keySet().iterator();
			while (iter.hasNext()){
				String key = iter.next();
				String value = kparams.getString(key);
				params.put(key, value);
			}
			auth.put("params",params);
		}
		
		if (args.containsKey("headers")){
			KrollDict kheaders = args.getKrollDict("headers");
			Map<String,String> headers = new HashMap<String,String>();	
			Iterator<String> iter = kheaders.keySet().iterator();
			while (iter.hasNext()){
				String key = iter.next();
				String value = kheaders.getString(key);
				headers.put(key, value);
			}
			auth.put("params",headers);
		}
		
		this.mPusher = new Pusher(mPusherKey, mEncrypted, auth);
		this.mPusher.setAutoReconnect(mReconnectAutomatically);	
		
	}
	
	@Kroll.method(runOnUiThread=true)
	public void connect() {
		this.mPusher.connect();
	}
	
	@Kroll.method(runOnUiThread=true)
	public void disconnect() {
		if(mPusher != null) {
			mPusher.disconnect();
		}
	}
	
	@Kroll.method(runOnUiThread=true)
	public void subscribeChannel(String channelName) {
		PusherChannel channel = mPusher.subscribe(channelName);
//		ChannelProxy channelProxy = new ChannelProxy();
//		channelProxy.configure(this, channel);
//		
//		return channelProxy;
	}
	
	
	@Kroll.method
	public void sendEvent(String eventName, String channelName, Object data) throws org.json.JSONException {
		JSONObject eventData = new JSONObject(TiConvert.toString(data));
		mPusher.sendEvent(eventName, eventData, channelName);
	}
	
	@Kroll.setProperty @Kroll.method
	public void setLog(final KrollFunction customLogger){
		mLogger = customLogger;
		mPusher.setLogger(new PusherLogger(){
			@Override
			public void log(String message){
				Object[] arg = new Object[1];
				arg[0] = message;
				mLogger.call(getKrollObject(), arg);
			}
		});			
	}
	
}
